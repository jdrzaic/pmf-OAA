package testing;

public class KMPImpl {
	
	public static final int REPEAT = 1000;
    private int[] next;

    // create Knuth-Morris-Pratt NFA from pattern
    public void preprocess(String pattern) {
        int M = pattern.length();
        next = new int[M];
        int j = -1;
        for (int i = 0; i < M; i++) {
            if (i == 0)                                      next[i] = -1;
            else if (pattern.charAt(i) != pattern.charAt(j)) next[i] = j;
            else                                             next[i] = next[j];
            while (j >= 0 && pattern.charAt(i) != pattern.charAt(j)) {
                j = next[j];
            }
            j++;
        }
    }

    // return offset of first occurrence of text in pattern (or N if no match)
    // simulate the NFA to find match
    public int search(String text, String pattern) {
        int M = pattern.length();
        int N = text.length();
        int i, j;
        for (i = 0, j = 0; i < N && j < M; i++) {
            while (j >= 0 && text.charAt(i) != pattern.charAt(j))
                j = next[j];
            j++;
        }
        if (j == M) return i - M;
        return N;
    }

    public void test2(int N, int M) {
		RandomString randText = new RandomString(N);
		String pattern = new RandomString(M).nextString();
		preprocess(pattern);
    	double sum = 0.0;
		for(int i = 0; i < REPEAT; ++i) {
			String text = randText.nextString();
			long startTime = System.nanoTime();    
        	int offset = search(text, pattern);
        	long execTime = System.nanoTime() - startTime;
        	double constant = execTime / (M + N);
        	sum += constant;
    	}
    	System.out.println("" + N + "   " + (sum / REPEAT));
		
	}
	
    public void test(int N, int M) {
    	RandomString randText = new RandomString(N);
    	RandomString randPatt = new RandomString(M);
    	double sum = 0.0;
    	for(int i = 0; i < REPEAT; ++i) {
    		String text = randText.nextString();
    		String pattern = randPatt.nextString();
            long startTime = System.nanoTime();    
            preprocess(pattern);
    		int offset = search(text, pattern);
        	long execTime = System.nanoTime() - startTime;
        	//System.out.println("time:" + execTime);
        	double constant = execTime / (M + N);
        	sum += constant;
            //System.out.println("time/m+n:" + constant);
            //System.out.println("offset:" + offset);
    	}
    	System.out.println("" + N + "   " + (sum / REPEAT));
    	/*String toSave = "M: " + M + "  N: " + N + " average: " + (sum / REPEAT); 
		FileWriter out;
		try {
			out = new FileWriter("results.txt", true);
			out.write(toSave + "\n");
			out.flush();
			out.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}*/
	
    }
    
    // test client
    public static void main(String[] args) {
        int N = Integer.valueOf(args[0]);
        int M = Integer.valueOf(args[1]);
        KMPImpl kmp = new KMPImpl();
        //kmp.preprocess("papar");
        //kmp.search("papapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapaapapapapapaaapaapapapapapapar", "papar");
        kmp.test2(N, M);
    }

}
